<div id="content">

  <div id="more_speakers_later" class="section">
    <h1>Speakers</h1>
	
	<p>
    The speakers for RubyNation 2010 have been selected, pending only a final verification
	check with each speaker to ensure their availability. We will publish the full list soon. 
	</p>

	<p>
    But in the meanwhile, we will announce a few of our featured speakers starting now.
    You didn't really want to wait any longer to hear how good RubyNation 2010 will be,
    did you?
    </p>

  </div>	

<!--
  <p>
    See our
    <a href="images/program/ruby09_schedule.pdf">program<a>
    for agenda details and speaker information.
  </p>
-->

  <a href="#dave_thomas"></a>
  <div id="dave_thomas" class="section">
    <h2>Keynote Presentation:  Dave Thomas</h2>

    <%= image_tag("speakers/2010/dave_thomas.gif", :size => "150x181",
                    :alt => "Dave Thomas", :class => "person-pic") %>

    <p>Dave Thomas is an internationally recognized expert Rubyist. He is a 
	cornerstone of the Ruby community, and is personally responsible for many of 
    its innovative directions and initiatives. Dave is a co-founder of the 
    <a href="http://www.pragprog.com/">Pragmatic Programmers and the Pragmatic 
	Bookshelf</a>. He helped write the now-famous 
    <a href="http://agilemanifesto.org/">Agile Manifesto</a>.  
    He is the author of many books, including the best sellers <em>The Pragmatic 
	Programmer</em>, <em>Agile Web Development with Rails</em> and <em>Programming 
	Ruby</em>. Dave's blog can be found at 
	<a href="http://pragdave.pragprog.com/">PragDave</a>. 
    </p>

    <p>For the past two years, Dave has been a featured speaker at our kick-off 
	events held in conjunction with the <a href="http://www.novarug.org">Northern 
	Virginia Ruby Users Group</a>, but he has never actually spoken at our 
	conference! We are really looking forward to correcting that.
    </p>

  </div> <!-- end speaker section -->
  
  <a href="#kyle_banker"></a>
  <div id="kyle_banker" class="section">
    <h2>Kyle Banker</h2>

    <%= image_tag("speakers/2010/kyle_banker.jpg", :size => "150x113",
                    :alt => "Kyle Banker", :class => "person-pic") %>

    <p>
    <strong>MongoDB: The Way and its Power</strong>: MongoDB seems like a 
    great idea. But when it comes to building an application, we may start 
    to miss all those patterns familiar to us from relational databases. 
    Where are my joins? How do I handle polymorphic associations? Here, 
    we'll examine a dozen ideas for working the MongoDB way, including plenty
    of code examples. These techniques will highlight the unique features of 
    the database, among them atomic updates, map/reduce, and the notion of 
    embedded documents. We'll also consider the hard questions, including how 
    to achieve durability, plan for scale, and reassure our 
    relational-database-oriented brethren of the viability of a
    document database like MongoDB. You'll come away with a good sense for the
    surprises and joys of building apps in MongoDB.
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>Kyle Banker works at 10gen, where he maintains the MongoDB Ruby Driver
    and supports the Ruby developer community. Previously, Kyle built
    e-commerce and social networking applications, and he once thrived as
    teacher of languages and literature.</i>
    </p>

  </div>

  
  <a href="#paul_barry"></a>
  <div id="paul_barry" class="section">
    <h2>Paul Barry</h2>

    <%= image_tag("speakers/2010/paul_barry_sm.jpg", :size => "150x150",
                    :alt => "Paul Barry", :class => "person-pic") %>

    <p>
    <strong>Block, Procs and Lambdas, Oh My!  Functional Programming in Ruby</strong>: 
	Despite being an object-oriented language,  
    Ruby contains functional programming features as well.  
    This talk will cover what those features are, provide an 
    in-depth look into how they work,
    and present examples of how to use them.  
    Paul will also compare Ruby to other functional programming languages 
    such as Clojure, Haskell, Erlang, Smalltalk, JavaScript 
    and Scala to show you how you can incorporate techniques commonly 
    used in those languages to improve your Ruby code.
    </p>

    <p>
    <b>About the Speaker</b>: <i>Paul Barry is a Software Developer from Baltimore, MD.  
    Paul has over 10 years experience developing web applications in a variety of languages 
    and frameworks, including Java, Perl, PHP and of course, Ruby on Rails.  
    Paul has been a speaker at ActsAsConf and RubyNation and is a regular attendee 
    and speaker at DC and Baltimore programming user groups.  
    He blogs about Ruby, Programming and a variety of other topics at 
    <a href="http://paulbarry.com/">http://paulbarry.com/</a>.</i>
    </p>

  </div>


  <a href="#michael_bleigh"></a>
  <div id="michael_bleigh" class="section">
    <h2>Michael Bleigh</h2>

    <%= image_tag("speakers/2010/michael_bleigh.jpg", :size => "75x100",
                    :alt => "Michael Bleigh Feldman", :class => "person-pic") %>

    <p>
    <strong>
    Persistence Smoothie - Blending SQL and NoSQL in Ruby Applications
    </strong>: 
    With such a vibrant and emerging economy of new persistence options
    for web applications it can be diffcult to know when and how to use
        them in your applications. Worse yet, you don't want to lose
        mountains of existing infrastructure and support for RDBMS systems
        in Rails. What's a developer to do? Blend it! Learn new techniques
        for using multiple persistence engines in a single application.
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>
    Michael Bleigh is the Creative Director and Open Source Activist at
    Intridea, Inc. He has created a number of popular Ruby open-source
    projects and plugins and has spoken at RailsConf, RailsConf Europe,
    and Confoo.ca.
    </i>
    </p>

  </div>

  
  <a href="#jeff_casimir"></a>
  <div id="jeff_casimir" class="section">
    <h2>Jeff Casimir</h2>

    <%= image_tag("speakers/2010/jeff_casimir.jpg", :size => "80x80",
                    :alt => "Jeff Casimir", :class => "person-pic") %>

    <p>
    <strong>How to Teach Anything to Anyone, Even Your Dev Team</strong>: 
    Michael Jordan will never be an effective NBA coach.  He was the
    greatest player ever, but being great at something is a fundamentally
    different skill set than being able to coach others to greatness.
    </p>

    <p>
    The Ruby community moves too quickly for any of us to be an expert in
    everything.  We all need to be both teachers and learners, coaches and
    players.
    </p>

    <p>
    Being a great programmer won't make you a great coach.  As programmers
    and managers, you can multiply your impact by raising the game of
    those around you. Like basketball, there are just a few techniques
    that you need to be great - then it takes practice.  In this session
    we'll crunch years of education study and practice into three
    principles you can deploy tomorrow.
    </p>

    <p>
    In this session we'll explore each concept then work through examples
    applying them to the typical development shop.  Attendees will leave
    with the understanding and framework to be great teachers.
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>After majoring in Computer Systems Engineering Jeff joined Teach for
    America and began a career in education.  He taught high school
    Computer Science for four years before moving into school
    administration.  As a Vice Principal, he was responsible for evaluating
    and hiring new teachers, observing and coaching existing teachers, and
    defining much of the school's academic process.
    </p>

    <p>
    Jeff is also a Ruby developer and loves discussing the art of building
    development teams and shops.  Jeff believes that effective teaching
    strategies can take these teams to the next level.

    </i>
    </p>

  </div>

  
  <a href="#damon_feldman"></a>
  <div id="damon_feldman" class="section">
    <h2>Damon Feldman</h2>

    <%= image_tag("speakers/2010/damon_feldman.jpg", :size => "118x150",
                    :alt => "Damon Feldman", :class => "person-pic") %>

    <p>
    <strong>
    Ruby and the XML Database
    </strong>: 
    Ruby provides a variety of powerful tools (Builder, LibXML, ReXML,
    etc.) for creating and parsing XML data. Unfortunately, this power
    doesn't translate to the databases we typically use for storing our
    XML data. These databases simply weren't designed to handle XML and
    therefore it becomes very cumbersome (at best) to manage our XML
    storage with these tools. This mismatch of capabilities can cripple
    our ability to work effectively with our XML data within Ruby. This
    talk focuses on removing that capability mismatch by combining Ruby
    with an XML database. An important part of this integration is
    ensuring that the tools and frameworks that we currently use, such as
    Rails, continue to be usable.  During this talk we will present
    extensive code samples as we explore: 
    <ul>
    <li>
    What is an XML database?
    </li>
    <li>
    How does an xml database enhance my existing Ruby xml capabilities?
    </li>
    <li>
    How do we connect to an XML database from Ruby?
    </li>
    <li>
    Integration with Rails
    </li>
    <li>
    The use of ActiveModel for compatibility with Rails 3.0
    </li>
    </ul>
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>
    Damon Feldman is a Senior Consultant with Mark Logic, a vendor of an
    XML Server that runs XQuery code.  Prior to working with XQuery, he
    worked for years in object-oriented systems, including Smalltalk, Java
    and Ruby. He also holds a doctorate in computer science from Tulane
    University, where he studied programming languages with a focus on
    functional and logic languages.
    </i>
    </p>

  </div>

  
  <a href="#neal_ford"></a>
  <div id="neal_ford" class="section">
    <h2>Neal Ford</h2>

    <%= image_tag("speakers/2010/neal_ford.jpg", :size => "118x150",
                    :alt => "Neal Ford", :class => "person-pic") %>

    <p>
    <strong>Rails in the Large: How Agility Allows Us to 
    Build One of the World's Biggest Rails App</strong>: 
    While others have been debating whether Rails can scale to enterprise
levels, we've been demonstrating it. ThoughtWorks is running one of the
largest Rails projects in the world, for an Enterprise. This session
discusses tactics, techniques, best practices, and other things we've
learned from scaling rails development. I discuss infrastructure, testing,
messaging, optimization, performance, and the results of lots of lessons
learned, including killer rock-scissors-paper tricks to help you avoid
babysitting the view tests!
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>
    Neal is Software Architect and Meme Wrangler at ThoughtWorks, a global
    IT consultancy with an exclusive focus on end-to-end software
    development and delivery. He is the designer/developer of
    applications, instructional materials, magazine articles, courseware,
    video/DVD presentations, and author and/or editor of 6 books. He also
    speaks at lots of conferences.
    </i>
    </p>

  </div>

  
  <a href="#jon_larkowski"></a>
  <div id="jon_larkowski" class="section">
    <h2>Jon Larkowski</h2>

    <%= image_tag("speakers/2010/jon_larkowski.jpg", :size => "150x150",
                    :alt => "Jon Larkowski", :class => "person-pic") %>

    <p><strong>Pure RSpec</strong>:
    Go beyond the well-worn fundamentals of RSpec.  No more will you
    simply set a bunch of instance variables in before-each blocks.  We'll
    explore the latest (and apparently not-super-well-known) features of
    RSpec. And not just technical syntax, but also the higher-level
    patterns and refactorings implied.  Topics include:  let, subject,
    its, expect, shared examples, shoulda matchers, stub_chain, unstub,
    spork, rspactor, and integration testing.
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>Jon "Lark" Larkowski is employee number one or two at Hashrocket,
    depending on how you count. He holds an Electrical
    Engineering/Computer Science degree from University of
    Wisconsin-Madison. Jon co-founded RubyJax: Jacksonville, Florida's
    best and only Ruby user group. He heroically escaped a bleak,
    dystopian world of .Net, grey cubicles and demoralizing waterfall
    methodologies, and now luxuriates beachside under palms, enjoying
    agile project management and extreme Rails development. Jon hails from
    scenic Chippewa Falls, Wisconsin, home of speedy Cray Supercomputers
    and refreshing Leinenkugel's beer. Lately, he's into the easier kinds
    of yoga, the heavier brands of Scandinavian progressive metal, and the
    spinnier style of ping pong.</i>
    </p>

  </div>
  
  <a href="#jeremy_mcanally"></a>
  <div id="jeremy_mcanally" class="section">
    <h2>Jeremy McAnally</h2>

    <%= image_tag("speakers/2010/jeremy_mcanally.jpg", :size => "175x110",
                    :alt => "Jeremy McAnally", :class => "person-pic") %>

    <p>
    <strong>Rails 3: Living in the Future</strong>: 
    There's a lot of Rails 2.x series code floating around. This talk is a
    practical walkthrough of how to upgrade an app to Rails 3 and a look
    at some of the features one can use to improve existing codebases.
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>Jeremy McAnally has been developing applications 
    with Ruby and Rails for a little over five years, 
    but before that he tortured himself with PHP,
    C#, Python, VB, and other instruments of destruction.  After finding
    the light, he worked with Ruby for a while and penned <a
    href="http://www.humblelittlerubybook.com/">"Mr. Neighborly's Humble
    Little Ruby Book"</a> (soon to be published by No
    Starch).  Since then he has continued writing software, books (such as
    <a href="http://www.manning.com/mcanally">"Ruby in Practice"</a>),
    open-source code (such as dcov, context, and more), presentations for
    numerous Ruby conferences and user groups, blogs at
    <a href="http://omgbloglol.com">omgbloglol</a>, and basically done anything he can to sharpen, and basically done anything he can to sharpen
    his Ruby (and Rails)-Fu.  He likes good food, good times, and a mean
    game of Wii Sports Resort Tennis.
    </i>
    </p>

  </div>

    <a href="#gregg_pollack"></a>
  <div id="gregg_pollack" class="section">
    <h2>Gregg Pollack</h2>

    <%= image_tag("speakers/2010/gregg_pollack.png", :size => "150x172",
                    :alt => "Gregg Pollack", :class => "person-pic") %>

    <p>
    <strong>Deciphering Yehuda</strong>: Yehuda Katz has done some great Ruby refactoring for Rails 3 over the
    past year, but do you really understand what he's done? In this talk,
    Gregg Pollack will attempt to examine Yehuda's
    work, identify and deconstruct each programming technique that he's
    applied, and then teach them in a way that everyone can understand.
    </p>

    <p>
    Some of the techniques to be discussed will include:
    Method Compilation vs Method Missing,
    Decoupling Components,
    Embracing Rack,
    alias_method_chain vs super,
    Abstract Classes, and 
    Componentization.
    </p>

    <p>
    Attendees should walk away with a greater understanding of some
    advanced Ruby design patterns and a better insight into the internals
    of Rails 3.
    </p>

    <p>
    <b>About the Speaker</b>:
    <i>Gregg Pollack is a well-known leader in the Ruby and Rails communities.
    Gregg works at
    <a href="http://envylabs.com/">Envy Labs</a>, 
    where he produces a 
    <a href="http://ruby5.envylabs.com/">podcast</a>, 
    creates 
    <a href="http://envylabs.com/media/screencasting">educational screencasts</a>, 
    and develops websites with Rails. 
    He is a founder and current member of the <a href="http://rubyonrails.org/activists">Rails Activists</a>, 
    a set of committed volunteers devoted to increasing the adoption of Rails.
    Gregg also organizes the 
    <a href="http://www.orug.org/">Orlando Ruby Users Group</a>, 
    and is also sometimes known as the Ruby on Rails guy in the 
    <a href="http://railsenvy.com/tag/Commercials">"Rails vs"</a> 
    commercials or the 
    <a href="http://railsenvy.com/2008/07/23/mvc-public-service-announcement-5-outdated-html">"C" in MVC</a>.</i>
    </p>

  </div>

  <a href="#brian_sam_bodden"></a>
  <div id="brian_sam_bodden" class="section">
    <h2>Brian Sam-Bodden</h2>

    <%= image_tag("speakers/2010/brian_sam_bodden.jpg", :size => "150x200",
                    :alt => "Brian Sam-Bodden", :class => "person-pic") %>

    <p><strong>Component-Oriented Web Applications in Ruby</strong>: 
    Trellis is a component-based, event-driven Web micro-framework that
    provides a DSL to describe web applications in terms of pages,
    components and events. It combines the best features of desktop
    application development and modern MVC frameworks like Rails and
    Sinatra. Trellis pushes the complexity of building web applications
    onto components allowing you to build simple lightweight applications
    or complex, feature-rich applications.
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>Brian Sam-Bodden is a developer, author and speaker that has spent
    over fifteen years building software in variety of languages. In the
    last four years his concentration has been on the Ruby programming
    language and the Ruby on Rails framework (although he still gets paid
    to do Java when no one is watching). Brian heads 
    <a href="http://www.integrallis.com">Integrallis</a>,
    a Ruby/Groovy/Java shop with offices in
    Columbus, Ohio and Scottsdale, Arizona.</i>
    </p>

  </div>

  <a href="#nick_sieger"></a>
  <div id="nick_sieger" class="section">
    <h2>Nick Sieger</h2>

    <%= image_tag("speakers/2010/nick_sieger_sm.jpg", :size => "150x150",
                    :alt => "Nick Sieger", :class => "person-pic") %>

    <p>
    <strong>Rails: The Killer Java Web Stack</strong>: Most people know that Rails 
	is the original productive web application framework that all the others copied, 
	and most know that it has been runnable on the Java Virtual Machine for years 
	via JRuby. What a lot of people don't know is how to properly integrate Rails 
	and Java; that is, how to incrementally introduce Rails into your legacy 
	Java environment and leverage its strengths without ditching your Java 
	infrastructure.
    </p>

    <p>
    Finally, all the pieces are in place to make Rails development and deployment 
	in a polyglot Java environment possible. Rails 3 brings all the goodness of 
	Rails in bite-size, composable chunks. Ant and Maven are becoming more 
	Ruby- and Rake-savvy, so you don't have to give up your build infrastructure. 
	Multiple database possibilities await, so you don't necessarily have to switch 
	to ActiveRecord. Use Ruby and Rails where it hurts the most to give your project
    more flexibility!
    </p>

    <p>
    In this session Nick will make recommendations on some of the best ways to making 
	Rails and Java play nicely together using JRuby, and run through some demos of the 
	more practical ways to get things done. Most exciting, you'll get a preview of the 
	quickly-evolving JRuby on Rails stack.
    </p>

    <p>
    <b>About the Speaker</b>: 
    <i>Nick Sieger is an engineer at 
    <a href="http://engineyard.com/">Engine Yard</a>, 
    working on JRuby and leading the effort to make the Java Virtual Machine a robust 
	yet easy-to-use deployment platform for Rails and Ruby web applications. He created 
	and co-maintains the JDBC adapter for ActiveRecord that JRuby on Rails uses for 
	database connectivity, as well as the Warbler tool and JRuby-Rack library for dealing 
	with Java application server deployment.</i>
    </p>

  </div>

  <a href="#glenn_vanderburg"></a>
  <div id="glenn_vanderburg" class="section">
    <h2>Glenn Vanderburg</h2>

    <%= image_tag("speakers/2010/glenn_vanderburg.jpg", :size => "100x150",
                    :alt => "Glenn Vanderburg", :class => "person-pic") %>

    <p>
    <strong>Enabling the Enterprise</strong>: 
    There is a kind of software development called "Enterprise Software
    Development." It's aimed at the problems of large corporate
    enterprises. It has its own tools, methods, and architectures.
    
    <p>
    And it doesn't work. Not even for large corporate enterprises.
    
    <p>
    Enterprises have been told that they have unique problems that smaller
    groups don't have.  But do they really?  And if they do, are they
    really the problems that enterprise tools are designed to solve?  In
    this talk, Glenn will explain why the real problem of enterprise software
    development is "Enterprise Software Development."

    <p>
    <b>About the Speaker</b>: 
    <i>
    Glenn Vanderburg is a principal at Relevance, Inc. He has worked in
    enterprises of all sizes, using tools that range from the ridiculous
    to the sublime.  This year, he's spending his days wrangling Ruby and
    Clojure.
    </i>
    </p>

  </div>

  
  <a href="#jim_weirich"></a>
  <div id="jim_weirich" class="section">
    <h2>Jim Weirich</h2>

    <%= image_tag("speakers/2010/jim_weirich.jpg", :size => "150x159",
                    :alt => "Jim Wierich", :class => "person-pic") %>

<p>
<strong>Solid Ruby</strong>: The 5 SOLID design principles 
(the Single Responsibility Principle,
the Open/Closed Principle,
the Liskov Substitution Principle,
the Interface Segregation Principle 
and the
Dependency Inversion Principle) 
form a great foundation for understanding
good Object Oriented design.  But the SOLID principles were originally
conceived with statically typed OO languages, such as C++ and Java, in
mind.  How well do these principles hold up when the implementation
language is Ruby?  Are the principles just as pertinent as they were in
Java, or does the dynamic nature of Ruby change what we mean by good
design?  In this presentation we will examine the SOLID principles to
understand their core purpose, and then run them through the "Ruby Filter"
to see if any of these core principles survive.  By understanding these
principles, we become better Ruby programmers.
</p>

    <p>
    <b>About the Speaker</b>:
<i>Jim Weirich is the Chief Scientist for EdgeCase LLC, a Rails
development firm located in Columbus Ohio. Jim has over twenty-five
years of experience in software development. He has worked with
real-time data systems for testing jet engines, networking software
for information systems, and image processing software for the
financial industry. Jim is active in the Ruby community and has
contributed to several Ruby projects, including the Rake build
        system and the RubyGems package software.</i>
</p>

  </div>

  <!--
  <div id="joe_obrien" class="section">
    <h2>Joe O'Brien</h2>

    <%= image_tag("speakers/2009/joe_obrien.gif", :size => "105x106",
                    :alt => "Joe O'Brien", :class => "person-pic") %>

    <p>
Joe O'Brien presents "Be Careful, Your Java is Showing".
</p>

    <p>
Have you ever opened up a Rails application and you can tell it was
someone's first Rails app after coming in from the Java world?  Are
you new to Rails and have wondered where your IOC container is, or why
you don't have any interfaces (and what's with all of these
underscores) ?
</p>

    <p>
This talk walks through many of the common pitfalls that people run
into coming from the Java world. I begin with simple idomatic issues 
(methods that end in a question mark, and underscores), to larger
issues such as IOC containers and AOP programming. This talk is
designed to dig into some of the deeper mental disconnect that many
developers have when coming over to the Rails world.
</p>

<p>
Joe is a father, speaker, author and developer. 
Before helping found EdgeCase, LLC, Joe was a developer with ThoughtWorks and spent much of his time working with large J2EE and .NET systems for Fortune 500 companies. 
He has spent his career as a developer, project manager, and everything in between. 
Joe is a passionate member of the open source community. 
He co-founded the Columbus Ruby Brigade and helped organize the Chicago Area Ruby Users Group. 
His passions are Agile Development in the Enterprise, Ruby, and demonstrating to the Fortune 500 the elegance and power of this incredible language.
</p>

  </div>

  <div id="russ_olsen" class="section">
    <h2>Russ Olsen</h2>

    <%= image_tag("speakers/2009/russ_olsen.jpg", :size => "125x150",
                    :alt => "Russ Olsen", :class => "person-pic") %>

    <p>
    Ask most Ruby or Groovy programmers and they will
    tell you that design patterns are among the things they
    are trying to leave behind. Design patterns are clearly a
    part of the old world of heavy weight processes and
    overblown designs that just doesn't work. Or are they?
    In this talk, Russ Olsen takes a fresh look at the original ideas
    behind design patterns to see how they fit with more
    the more flexible, dynamic languages of today.
    </p>

    <p>
Russ Olsen's career spans almost three decades, during which he
has written graphics device drivers, geographic information
 systems, power system simulators  and document management systems.

Russ is currently a senior engineer with FGM, where he builds
enterprise information systems with both J2EE and Rails.

Russ spends a lot of his otherwise free time talking and writing about
technology. Russ is the author of <em>Design Patterns in Ruby</em> and lives
outside of Washington DC with his family and two turtles.
</p>

  </div>

  <div id="david_keener" class="section">
    <h2>David Keener</h2>

    <%= image_tag("speakers/2009/david_keener.jpg", :size => "125x125",
                    :alt => "David Keener", :class => "person-pic") %>

    <p>
David Keener presents "Creating A World-Class RESTful Web Services API".
</p>

<p>
Companies like Amazon, Google and Yahoo have published web services API's that empower developers to create mash-ups, add-ons and full-scale applications. The creation of such API's, however, is not exclusively the domain of large, multi-national corporations. Learn how to architect, build and field a well-designed and scalable RESTful web services API that will allow your business to leverage the capabilities of the developer community. This presentation includes real-life examples from the
Grab Networks RESTful API, which provides access to information about the hundreds of thousands of news videos available through Grab Networks' distribution network. Topics covered include:
</p>

<p>
<ul>
<li>
- The value proposition for a web services API.
</li>
<li>
- Design considerations for a usable API.
</li>
<li>
- Authentication and Authorization strategies.
</li>
<li>
- Scalability tips for handling serious traffic.
</li>
<li>
- Supporting search functionality in your API.
</li>
<li>
- Error Handling.
</li>
<li>
- Sample web service client using ActiveResource.
</li>
</ul>

</p>

<p>
David Keener is a writer and technical architect with over 20 years of experience; he blogs regularly at KeenerTech.com. He is a technical architect for Grab Networks, the company known for streaming the Beijing Olympics over the web and for distributing more news videos in the US than any other company except MSNBC.
</p>

  </div>
  -->

  <div id="lightning_talks" class="section">
    <h2>Could Be You!</h2>

    <%= image_tag("speakers/2009/mystery_person.gif", :size => "80x100",
                    :alt => "Could Be You!", :class => "person-pic") %>

    <p>
The RubyNation wants to hear your <b>lightning talk!</b>
Whatever you want to talk, rave, or rant about, this is your chance.
We don't care what it is, just as long as it is of interest to the 
Ruby community and relatively short (like 10 minutes max). 
Your lightning talk can be fun, like "<em>X</em> is awesome! It changed me as a person!", 
a call to arms, like "Help us build <em>Y</em>. The world needs it!", 
a plea, like "Let's put an end to the scourge of <em>Z</em>.".
You've heard of opinionated software, well this is opinionated talking.
So, let's hear yours.
Oh, and please keep it no worse than PG-13 rated.
</p>

  </div> <!-- section -->

  <div id="ruby_marketplace" class="section">
    <h2>Ruby Marketplace if employment.nil?</h2>

    <p>
Need a Ruby or Rails job? Need Ruby or Rails developers?
Stop by the Ruby Marketplace and tell us all about it.
Maybe you can find your dream job, or find that
one awesome rubyist who can make your project soar.
    During this special session we will open the microphone 
to employers and potential employees.
</p>

    <p>
    Last year the Ruby Marketplace at RubyNation was responsible for
    several people getting Ruby work. That is something of which we are 
    immensely proud, and we want to build on that this year. 
    So, help us give the economy a Ruby Stimulus!
    Tell your HR department to get cracking on a short announcement!
    If you got a job to tell, we wannna hear about it!
</p>

  </div> <!-- section -->

</div>
